# -*- coding: utf-8 -*-
"""ProductivityPrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l-HvGFr-DMi4PYp26vCpj8cpiifEMG4s
"""

from sklearn import preprocessing
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from tensorflow.keras.callbacks import EarlyStopping, TensorBoard
import datetime, os
import pandas as pd

#1. Read the csv data
file_path = r"/content/garments_worker_productivity.csv"
data = pd.read_csv(file_path)

print(data.isna().sum())
data.shape

data.hist()

data.describe(include=['O'])
data.describe().T

#change date to datetime format
data['date'] = pd.to_datetime(data['date'])
#correct sweing to sewing
data['department'] = data['department'].apply(lambda x: 'finishing' if x == ('finishing ' or 'finishing' ) else 'sewing' )

#fill NaN
data['wip'].fillna(int(data['wip'].mean()), inplace=True)

data.isnull().sum()

#split features and labels
data_features = data[['targeted_productivity', 'team','smv','idle_men', 'no_of_style_change']]
data_label = data['actual_productivity']

#Perform train-test split
SEED=12345
x_train, x_test, y_train, y_test = train_test_split(data_features,data_label,test_size=0.3,random_state=SEED)

#Data Normalization
scaler = StandardScaler()
scaler.fit(x_train)
x_train = scaler.transform(x_train)
x_test = scaler.transform(x_test)

#build model
model = keras.Sequential(
    [layers.Dense(32,activation='relu'),
     layers.Dense(16,activation='relu'),
     layers.Dense(1)
    ]
)

#Compile the model
model.compile(optimizer='adam' ,loss='mse', metrics=['mae'])

#7. Prepare the early stopping and tensorboard callbacks
base_log_path = r"/content/results"
log_path = os.path.join(base_log_path, datetime.datetime.now().strftime("%Y%m%d-%H%M%S"))
es = EarlyStopping(monitor='val_loss',patience=20)
tensorboard_callback = tf.keras.callbacks.TensorBoard(log_path, histogram_freq=1)

#8. Train the model
history = model.fit(x_train,y_train,validation_data=(x_test,y_test),batch_size=16,epochs=100,callbacks=[es,tensorboard_callback])

from keras.utils.vis_utils import plot_model
plot_model(model, to_file='model_plot.png', show_shapes=True, show_layer_names=True)

# Commented out IPython magic to ensure Python compatibility.
#load tensorboard
# %load_ext tensorboard
# %tensorboard --logdir /content/results